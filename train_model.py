# -*- coding: utf-8 -*-
"""train_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11qZyWu-fNOp8jR9KPpuCwF6NvD8PSAa1
"""

!unzip -q /content/faces_dataset.zip -d /content/unzipped1_folder

"""# build the model"""

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader, random_split
import os
from PIL import Image # Import the Image module

# Function to check if a file is a valid image
def is_valid_file(path):
    try:
        Image.open(path)
        return True
    except Exception:
        return False

#  1. Set up dataset path (organized by class folders)
data_dir = '/content/unzipped1_folder'  # replace with faces dataset

#  2. Define image transforms (must match model input requirements)
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.ColorJitter(brightness=0.2, contrast=0.2),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

# 3. Load dataset (should be in folders by class name)
# Add is_valid_file to skip invalid files
dataset = datasets.ImageFolder(root=data_dir, transform=transform, is_valid_file=is_valid_file)

#  4. Split dataset into training and validation
train_size = int(0.8 * len(dataset))
val_size = len(dataset) - train_size
train_dataset, val_dataset = random_split(dataset, [train_size, val_size])

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)

#  5. Load pretrained ResNet18 and modify classifier
model = models.resnet18(pretrained=True)
num_features = model.fc.in_features
model.fc = nn.Linear(num_features, len(dataset.classes))  # Automatically adapts to your classes

# 6. Move model to GPU if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)

#  7. Set loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.0001)

# 8. Train the model
epochs = 10
for epoch in range(epochs):
    model.train()
    running_loss = 0.0

    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

    print(f"[Epoch {epoch+1}/{epochs}] Training Loss: {running_loss / len(train_loader):.4f}")

# 9. Save model
torch.save(model.state_dict(), 'emotion_model.pth')
print("\nModel training complete and saved as 'emotion_model.pth'")

#  10. Print class labels for future reference
print("Class labels:", dataset.classes)

"""# Evaluate the model"""

model.eval()
    val_loss = 0.0
    correct = 0
    total = 0

    with torch.no_grad():
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            loss = criterion(outputs, labels)
            val_loss += loss.item()

            # Optional: calculate validation accuracy
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    avg_val_loss = val_loss / len(val_loader)
    val_accuracy = 100 * correct / total

    print(f"[Epoch {epoch+1}/{epochs}] "

          f"Val Loss: {avg_val_loss:.4f} | "
          f"Val Acc: {val_accuracy:.2f}%")
